{
	"info": {
		"_postman_id": "b2d4904f-47c0-4264-9053-1f14cb533cc2",
		"name": "Bookshelf API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26368157"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Admin Login (Get Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has auth token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    ",
									"    // Store the admin token in collection variable for later use",
									"    pm.collectionVariables.set(\"admin_token\", jsonData.access_token);",
									"    console.log(\"Admin token stored: \" + jsonData.access_token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Regular User Login (Get Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has auth token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    ",
									"    // Store the regular user token in collection variable for later use",
									"    pm.collectionVariables.set(\"regular_token\", jsonData.access_token);",
									"    console.log(\"Regular user token stored: \" + jsonData.access_token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{regular_username}}\",\n    \"password\": \"{{regular_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "List Books (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has books array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Pagination works correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.at.most(5);",
									"});",
									"",
									"pm.test(\"No authentication required for listing books\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/books?per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Book (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(1);",
									"    pm.expect(jsonData.data.title).to.exist;",
									"    pm.expect(jsonData.data.isbn).to.exist;",
									"    pm.expect(jsonData.data.description).to.exist;",
									"});",
									"",
									"pm.test(\"No authentication required for getting single book\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Books by Title (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has books array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Search results contain title filter\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(book) {",
									"            pm.expect(book.title.toLowerCase()).to.include('game');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"No authentication required for searching books\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/books?title=Jurassic&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "Jurassic",
									"description": "Search for books containing 'Jurassic' in title"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Books by ISBN (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has books array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Search results match ISBN\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(book) {",
									"            pm.expect(book.isbn).to.include('978');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"No authentication required for searching books by ISBN\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/books?isbn=9781408855669&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "isbn",
									"value": "9781408855669",
									"description": "Search for books by ISBN containing '978'"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot create books\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"isbn\", Math.floor(Math.random() * 9000000000000) + 1000000000000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Book Title\",\n    \"isbn\": \"{{isbn}}\",\n    \"description\": \"Book description\",\n    \"author_ids\": [1, 2],\n    \"genre_ids\": [3, 4]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Book created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.title).to.eql(\"New Book Title\");",
									"    pm.expect(String(jsonData.data.isbn)).to.equal(String(pm.collectionVariables.get(\"isbn\")));",
									"",
									"    pm.collectionVariables.set(\"created_book_id\", jsonData.data.id);",
									"    console.log(\"Created book ID: \" + pm.collectionVariables.get(\"created_book_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Book Title\",\n    \"isbn\": \"{{isbn}}\",\n    \"description\": \"Book description\",\n    \"author_ids\": [1, 2],\n    \"genre_ids\": [3, 4]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Book - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot update books\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"update_isbn\", Math.floor(Math.random() * 9000000000000) + 1000000000000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Book Title\",\n    \"isbn\": \"{{update_isbn}}\",\n    \"description\": \"Updated description\",\n    \"author_ids\": [1],\n    \"genre_ids\": [3, 5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/books/{{created_book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books",
								"{{created_book_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Book - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.title).to.eql(\"Updated Book Title\");",
									"    pm.expect(jsonData.data.description).to.eql(\"Updated description\");",
									"    pm.expect(String(jsonData.data.isbn)).to.equal(String(pm.collectionVariables.get(\"update_isbn\")));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Book Title\",\n    \"isbn\": \"{{update_isbn}}\",\n    \"description\": \"Updated description\",\n    \"author_ids\": [1],\n    \"genre_ids\": [3, 5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/books/{{created_book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books",
								"{{created_book_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot delete books\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/books/{{created_book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books",
								"{{created_book_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/books/{{created_book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"books",
								"{{created_book_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authors",
			"item": [
				{
					"name": "List Authors (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has authors array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Pagination works correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.at.most(5);",
									"});",
									"",
									"pm.test(\"No authentication required for listing authors\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/authors?per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors"
							],
							"query": [
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Author (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Author has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(1);",
									"    pm.expect(jsonData.data.name).to.exist;",
									"    pm.expect(jsonData.data.biography).to.exist;",
									"});",
									"",
									"pm.test(\"No authentication required for getting single author\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/authors/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Authors by Name (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has authors array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Search results contain name filter\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(author) {",
									"            pm.expect(author.name.toLowerCase()).to.include('martin');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"No authentication required for searching authors\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/authors?name=Rowling&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors"
							],
							"query": [
								{
									"key": "name",
									"value": "Rowling",
									"description": "Search for authors containing 'Martin' in name"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Author - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot create authors\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"George R.R. Martin\",\n    \"biography\": \"George Raymond Richard Martin, often referred to as GRRM, is an American novelist and short story writer, screenwriter, and television producer. He is best known for his epic fantasy series *A Song of Ice and Fire*, which was adapted into the acclaimed HBO series *Game of Thrones*. Martin's storytelling is known for its complex characters, political intrigue, and willingness to kill off main characters. His work has garnered a massive fanbase and significant critical acclaim, and he is considered one of the most influential contemporary fantasy authors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/authors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Author - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Author created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql(\"George R.R. Martin\");",
									"    pm.collectionVariables.set(\"created_author_id\", jsonData.data.id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"George R.R. Martin\",\n    \"biography\": \"George Raymond Richard Martin, often referred to as GRRM, is an American novelist and short story writer, screenwriter, and television producer. He is best known for his epic fantasy series *A Song of Ice and Fire*, which was adapted into the acclaimed HBO series *Game of Thrones*. Martin's storytelling is known for its complex characters, political intrigue, and willingness to kill off main characters. His work has garnered a massive fanbase and significant critical acclaim, and he is considered one of the most influential contemporary fantasy authors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/authors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Author - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot update authors\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"[Updated] George R.R. Martin\",\n    \"biography\": \"[Updated] George Raymond Richard Martin, often referred to as GRRM, is an American novelist and short story writer, screenwriter, and television producer. He is best known for his epic fantasy series *A Song of Ice and Fire*, which was adapted into the acclaimed HBO series *Game of Thrones*. Martin's storytelling is known for its complex characters, political intrigue, and willingness to kill off main characters. His work has garnered a massive fanbase and significant critical acclaim, and he is considered one of the most influential contemporary fantasy authors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/authors/{{created_author_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors",
								"{{created_author_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Author - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Author updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql(\"[Updated] George R.R. Martin\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"[Updated] George R.R. Martin\",\n    \"biography\": \"[Updated] George Raymond Richard Martin, often referred to as GRRM, is an American novelist and short story writer, screenwriter, and television producer. He is best known for his epic fantasy series *A Song of Ice and Fire*, which was adapted into the acclaimed HBO series *Game of Thrones*. Martin's storytelling is known for its complex characters, political intrigue, and willingness to kill off main characters. His work has garnered a massive fanbase and significant critical acclaim, and he is considered one of the most influential contemporary fantasy authors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/authors/{{created_author_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors",
								"{{created_author_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Author - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot delete authors\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/authors/{{created_author_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors",
								"{{created_author_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Author - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/authors/{{created_author_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"authors",
								"{{created_author_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Genres",
			"item": [
				{
					"name": "List Genres (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has genres array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Pagination works correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.at.most(5);",
									"});",
									"",
									"pm.test(\"No authentication required for listing genres\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/genres?per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres"
							],
							"query": [
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Genre (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Genre has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(1);",
									"    pm.expect(jsonData.data.name).to.exist;",
									"});",
									"",
									"pm.test(\"No authentication required for getting single genre\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/genres/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Genres by Name (No Auth Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has genres array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Search results contain name filter\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(genre) {",
									"            pm.expect(genre.name.toLowerCase()).to.include('fantasy');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"No authentication required for searching genres\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/genres?name=Fantasy&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres"
							],
							"query": [
								{
									"key": "name",
									"value": "Fantasy",
									"description": "Search for genres containing 'Fantasy' in name"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Genre - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot create genres\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Epic Fantasy\",\n    \"description\": \"Epic fantasy is a subgenre of fantasy fiction that involves epic quests, large-scale conflicts, and richly detailed secondary worlds. Often featuring magic systems, mythical creatures, and complex political intrigue, epic fantasy stories typically span multiple volumes and follow heroes on world-changing adventures.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/genres",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Genre - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Genre created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql(\"Epic Fantasy\");",
									"    pm.collectionVariables.set(\"created_genre_id\", jsonData.data.id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Epic Fantasy\",\n    \"description\": \"Epic fantasy is a subgenre of fantasy fiction that involves epic quests, large-scale conflicts, and richly detailed secondary worlds. Often featuring magic systems, mythical creatures, and complex political intrigue, epic fantasy stories typically span multiple volumes and follow heroes on world-changing adventures.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/genres",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Genre - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot update genres\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"[Updated] Epic Fantasy\",\n    \"description\": \"[Updated] Epic fantasy is a subgenre of fantasy fiction that involves epic quests, large-scale conflicts, and richly detailed secondary worlds. Often featuring magic systems, mythical creatures, and complex political intrigue, epic fantasy stories typically span multiple volumes and follow heroes on world-changing adventures.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/genres/{{created_genre_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres",
								"{{created_genre_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Genre - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Genre updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql(\"[Updated] Epic Fantasy\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"[Updated] Epic Fantasy\",\n    \"description\": \"[Updated] Epic fantasy is a subgenre of fantasy fiction that involves epic quests, large-scale conflicts, and richly detailed secondary worlds. Often featuring magic systems, mythical creatures, and complex political intrigue, epic fantasy stories typically span multiple volumes and follow heroes on world-changing adventures.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/genres/{{created_genre_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres",
								"{{created_genre_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Genre - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot delete genres\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/genres/{{created_genre_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres",
								"{{created_genre_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Genre - Admin User (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/genres/{{created_genre_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"genres",
								"{{created_genre_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.ateeqend.com/api",
			"type": "string"
		},
		{
			"key": "admin_username",
			"value": "ateeq@ateeqend.com",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "password",
			"type": "string"
		},
		{
			"key": "regular_username",
			"value": "regular@ateeqend.com",
			"type": "string"
		},
		{
			"key": "regular_password",
			"value": "password",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "regular_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "update_isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_book_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_author_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_genre_id",
			"value": "",
			"type": "string"
		}
	]
}